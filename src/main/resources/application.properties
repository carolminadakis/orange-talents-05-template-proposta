# datasource
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/proposta?createDatabaseIfNotExist=true}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:root}

# jpa
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

# Para deixar o console colorido
spring.output.ansi.enabled=ALWAYS

#Variáveis
proposta.analise-financeira.host=${ANALISE_FINANCEIRA_URL:http://localhost:9999}
proposta.analise-financeira.solicitacao=${ANALISE_FINANCEIRA_API_SOLICITACAO:/api/solicitacao}
proposta.cartao.host=${CARTAO_URL:http://localhost:8888}
proposta.cartoes=${CARTAO_API_CARTOES:/api/cartoes}
cartao.bloqueio=${CARTAO_BLOQUEIO:/api/cartoes/{id}/bloqueios}
avisos.cartoes=${CARTAO_API_CARTOES_AVISOS:/api/cartoes/{id}/avisos}
proposta.service.carteira=${CARTAO_API_CARTOES_CARTEIRAS:/api/cartoes/{id}/carteiras}


#Métricas, health check e prometheus
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=serviço de proposta
management.metrics.tags.ambiente=desenvolvimento

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}


# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.proposta}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

proposta.secret=89794b621a313bb59eed0d9f0f4e8205
proposta.salt=c9b43d6cffde4ff6